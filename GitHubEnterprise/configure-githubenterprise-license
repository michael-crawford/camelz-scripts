#!/bin/bash
#
# Configure GitHubEnterprise License and Management Password
#

#  1. Initalize Environment

logfile=/var/log/$(basename $0).log
initial_echo=1  # Start cfn-init.log command output on new line

interactive=1
verbose=1
private=0
unset password
unset license


#  2. Define functions

usage() {
    echo "Usage: ${BASH_SOURCE##*/} [-n] [-v] [-p]"
    echo "                  [-P password] [-L license]"
    echo "  -n              non-interactive"
    echo "  -v              verbose"
    echo "  -p              private subnet"
    echo "  -P password     Management Password"
    echo "  -L license      License File Path"
}

console() {
    case $1 in
      "error" | "ERROR" | 0) level=0; label="ERROR"; shift 1;;
      "warn"  | "WARN"  | 1) level=1; label="WARN";  shift 1;;
      "info"  | "INFO"  | 2) level=2; label="INFO";  shift 1;;
      "debug" | "DEBUG" | 3) level=3; label="DEBUG"; shift 1;;
                          *) level=2; label="INFO";;
    esac

    if [ $interactive = 1 ]; then
        if [ $verbose -ge $level ]; then
            echo "$*"
        fi
    else
        [ $initial_echo = 1 ] && echo && initial_echo=0
        # cfn-init.log format
        echo "$(date +'%Y-%m-%d %H:%M:%S,%3N') [$label] $*"
    fi
}

log() {
    case $1 in
      "error" | "ERROR" | 0) level=0; label="ERROR"; shift 1;;
      "warn"  | "WARN"  | 1) level=1; label="WARN "; shift 1;;
      "info"  | "INFO"  | 2) level=2; label="INFO "; shift 1;;
      "debug" | "DEBUG" | 3) level=3; label="DEBUG"; shift 1;;
                          *) level=2; label="INFO ";;
    esac

    # syslog format
    echo "$(date +'%b %e %H:%M:%S') $this_host $(basename $0): $label $*" >> $logfile
}

isip() {
    local IFS='.'
    local ip=$1

    if [[ $ip =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
        octet=($ip)
        if [[ ${octet[0]} -le 255 && ${octet[1]} -le 255 && ${octet[2]} -le 255 && ${octet[3]} -le 255 ]]; then
            return $?
        else
            return 9
        fi
    fi
    return 9
}


#  3. Parse command line options

while getopts nvpP:L:? arg; do
    case $arg in
    n)  interactive=0;;
    v)  ((verbose++));;
    p)  private=1;;
    P)  password="$OPTARG";;
    L)  license="$OPTARG";;
    ?)  usage
        exit 1;;
    esac
done

shift $(($OPTIND - 1))

if [ $private = 1 ]; then
    address=$(curl -s -m 60 http://169.254.169.254/latest/meta-data/local-ipv4)
else
    address=$(curl -s -m 60 http://169.254.169.254/latest/meta-data/public-ipv4)
fi


#  4. Validate environment

if [ -z $password ]; then
    console ERROR "-P password missing!"
    exit 10
fi

if [ -z $license ]; then
    console ERROR "-L license missing!"
    exit 12
elif [ ! -r $license ]; then
    console ERROR "-L $license does not exist or is unreadable!"
    exit 13
fi

if ! isip "$address"; then
    console ERROR "address is invalid - using private subnet?"
    exit 20
fi


#  5. Main

setup_start_url=https://$address:8443/setup/api/start
setup_configure_url=https://api_key:$password@localhost:8443/setup/api/configure
setup_configcheck_url=https://api_key:$password@localhost:8443/setup/api/configcheck

date >/root/install_date
tmpdir=$(mktemp -d /tmp/XXXXXXXXXXXXX)

sleep 60 # Even once GitHubEnterprise starts to respond, it can take a while longer before it accepts this command, so let's wait a minute

console "Set the GitHub Enterprise Admin password to $password, and upload the license from $license"
# Original: curl -o /dev/null -i -k -L --write-out '%{http_code}' -F license=@/tmp/github-enterprise.ghl -F password=$1 -X POST https://${EC2_IP}:8443/setup/api/start
status=$(curl --include --insecure --location --silent --show-error \
              --request POST \
              --form license=@$license \
              --form password=$password \
              --output $tmpdir/setup-start.out \
              --write-out '%{http_code}' \
              $setup_start_url)

case $status in
  202)
    console "License and Management Password Set [Status: $status]"
    ;;
  *)
    console ERROR "Could not configure License and Management Password [Status: $status]"
    console ERROR "Response Body: $(sed -n -e '/^{/,$p' $tmpdir/setup-start.out)"
    exit 1
    ;;
esac


console "Initiate the GitHub Enterprise configuration process"
# Original: curl -i -k -L --write-out '%{http_code}' --silent -X POST https://api_key:$1@localhost:8443/setup/api/configure
status=$(curl --include --insecure --location --silent --show-error \
              --request POST \
              --output $tmpdir/setup-configure.out \
              --write-out '%{http_code}' \
              $setup_configure_url)

case $status in
  202)
    console "Configuration Initiated [Status: $status]"
    ;;
  *)
    console ERROR "Could not Initiate Configuration [Status: $status]"
    console ERROR "Response Body: $(sed -n -e '/^{/,$p' $tmpdir/setup-configure.out)"
    exit 2
    ;;
esac


console "Check GitHub Enterprise configuration status until complete"
# Original: curl -k -L https://api_key:$1@localhost:8443/setup/api/configcheck | awk -F, '{print $NF}' | awk -F: '{print $NF}' |tail -n1
response=$(curl --insecure --location --silent --show-error $setup_configcheck_url)
status=$(echo $response | jq -r '.status')
echo $response | jq -r '"status: " + .status' | sed -e "s/^/$(date +'%Y-%m-%d %H:%M:%S,%3N') [DEBUG] /"
echo $response | jq -r '.progress[] | .key + ": " + .status' | sed -e "s/^/$(date +'%Y-%m-%d %H:%M:%S,%3N') [DEBUG] /"
while [[ ${status} != 'success' ]]; do
    console DEBUG "Waiting for status to reach success. Current progress:"
    sleep 15
    response=$(curl --insecure --location --silent --show-error $setup_configcheck_url)
    status=$(echo $response | jq -r '.status')
    echo $response | jq -r '"status: " + .status' | sed -e "s/^/$(date +'%Y-%m-%d %H:%M:%S,%3N') [DEBUG] /"
    echo $response | jq -r '.progress[] | .key + ": " + .status' | sed -e "s/^/$(date +'%Y-%m-%d %H:%M:%S,%3N') [DEBUG] /"
done

rc=$?
sleep 2 # Wait for script messages to post
exit $rc
