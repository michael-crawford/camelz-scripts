#!/bin/bash
#
# Check GitHubEnterprise
#

#  1. Initalize Environment

logfile=/var/log/$(basename $0).log
initial_echo=1  # Start cfn-init.log command output on new line

interactive=1
verbose=1
private=0


#  2. Define functions

usage() {
    echo "Usage: ${BASH_SOURCE##*/} [-n] [-v] [-p]"
    echo "  -n              non-interactive"
    echo "  -v              verbose"
    echo "  -p              private subnet"
}

console() {
    case $1 in
      "error" | "ERROR" | 0) level=0; label="ERROR"; shift 1;;
      "warn"  | "WARN"  | 1) level=1; label="WARN";  shift 1;;
      "info"  | "INFO"  | 2) level=2; label="INFO";  shift 1;;
      "debug" | "DEBUG" | 3) level=3; label="DEBUG"; shift 1;;
                          *) level=2; label="INFO";;
    esac

    if [ $interactive = 1 ]; then
        if [ $verbose -ge $level ]; then
            echo "$*"
        fi
    else
        [ $initial_echo = 1 ] && echo && initial_echo=0
        # cfn-init.log format
        echo "$(date +'%Y-%m-%d %H:%M:%S,%3N') [$label] $*"
    fi
}

log() {
    case $1 in
      "error" | "ERROR" | 0) level=0; label="ERROR"; shift 1;;
      "warn"  | "WARN"  | 1) level=1; label="WARN "; shift 1;;
      "info"  | "INFO"  | 2) level=2; label="INFO "; shift 1;;
      "debug" | "DEBUG" | 3) level=3; label="DEBUG"; shift 1;;
                          *) level=2; label="INFO ";;
    esac

    # syslog format
    echo "$(date +'%b %e %H:%M:%S') $this_host $(basename $0): $label $*" >> $logfile
}

isip() {
    local IFS='.'
    local ip=$1

    if [[ $ip =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
        octet=($ip)
        if [[ ${octet[0]} -le 255 && ${octet[1]} -le 255 && ${octet[2]} -le 255 && ${octet[3]} -le 255 ]]; then
            return $?
        else
            return 9
        fi
    fi
    return 9
}


#  3. Parse command line options

while getopts nvp? arg; do
    case $arg in
    n)  interactive=0;;
    v)  ((verbose++));;
    p)  private=1;;
    ?)  usage
        exit 1;;
    esac
done

shift $(($OPTIND - 1))

if [ $private = 1 ]; then
    address=$(curl -s -m 60 http://169.254.169.254/latest/meta-data/local-ipv4)
else
    address=$(curl -s -m 60 http://169.254.169.254/latest/meta-data/public-ipv4)
fi


#  4. Validate environment

if ! isip "$address"; then
    console ERROR "address is invalid - using private subnet?"
    exit 20
fi


#  5. Main

setup_url=https://$address:8443/setup

console DEBUG "Wait for GitHubEnterprise to respond"

attempt=0
attempts=30
delay=10
responded=0
while ((attempt++ <= attempts)); do
    status=$(curl --include --insecure --location --silent --write-out '%{http_code}' --output /dev/null $setup_url)
    console DEBUG "Testing $setup_url, curl return code: $?, HTTP response code: $status"
    if [ "$status" = "200" ]; then
        responded=1
        break
    else
        console DEBUG "GitHubEnterprise setup page not yet responding, pausing $delay seconds..."
        sleep $delay
    fi
done

if [ $responded = 1 ]; then
    console "GitHubEnterprise setup page responding"
else
    console ERROR "GitHubEnterprise setup page did not respond in expected timeframe"
    exit 3
fi

rc=$?
sleep 2 # Wait for script messages to post
exit $rc
